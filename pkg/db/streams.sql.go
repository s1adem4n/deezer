// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: streams.sql

package db

import (
	"context"
)

const createStream = `-- name: CreateStream :one
INSERT INTO streams (bitrate, equalizer, path, track_id)
VALUES (?, ?, ?, ?)
RETURNING id, bitrate, equalizer, path, track_id
`

type CreateStreamParams struct {
	Bitrate   int64  `json:"bitrate"`
	Equalizer string `json:"equalizer"`
	Path      string `json:"path"`
	TrackID   int64  `json:"trackId"`
}

func (q *Queries) CreateStream(ctx context.Context, arg CreateStreamParams) (Stream, error) {
	row := q.db.QueryRowContext(ctx, createStream,
		arg.Bitrate,
		arg.Equalizer,
		arg.Path,
		arg.TrackID,
	)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.Bitrate,
		&i.Equalizer,
		&i.Path,
		&i.TrackID,
	)
	return i, err
}

const deleteStream = `-- name: DeleteStream :exec
DELETE FROM streams
WHERE id = ?
`

func (q *Queries) DeleteStream(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStream, id)
	return err
}

const getStream = `-- name: GetStream :one
SELECT id, bitrate, equalizer, path, track_id
FROM streams
WHERE id = ?
`

func (q *Queries) GetStream(ctx context.Context, id int64) (Stream, error) {
	row := q.db.QueryRowContext(ctx, getStream, id)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.Bitrate,
		&i.Equalizer,
		&i.Path,
		&i.TrackID,
	)
	return i, err
}

const getStreamByParams = `-- name: GetStreamByParams :one
SELECT id, bitrate, equalizer, path, track_id
FROM streams
WHERE track_id = ?
  AND equalizer = ?
  AND bitrate = ?
`

type GetStreamByParamsParams struct {
	TrackID   int64  `json:"trackId"`
	Equalizer string `json:"equalizer"`
	Bitrate   int64  `json:"bitrate"`
}

func (q *Queries) GetStreamByParams(ctx context.Context, arg GetStreamByParamsParams) (Stream, error) {
	row := q.db.QueryRowContext(ctx, getStreamByParams, arg.TrackID, arg.Equalizer, arg.Bitrate)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.Bitrate,
		&i.Equalizer,
		&i.Path,
		&i.TrackID,
	)
	return i, err
}

const getStreams = `-- name: GetStreams :many
SELECT id, bitrate, equalizer, path, track_id
FROM streams
`

func (q *Queries) GetStreams(ctx context.Context) ([]Stream, error) {
	rows, err := q.db.QueryContext(ctx, getStreams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stream
	for rows.Next() {
		var i Stream
		if err := rows.Scan(
			&i.ID,
			&i.Bitrate,
			&i.Equalizer,
			&i.Path,
			&i.TrackID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStream = `-- name: UpdateStream :exec
UPDATE streams
SET bitrate = ?,
  equalizer = ?,
  path = ?,
  track_id = ?
WHERE id = ?
`

type UpdateStreamParams struct {
	Bitrate   int64  `json:"bitrate"`
	Equalizer string `json:"equalizer"`
	Path      string `json:"path"`
	TrackID   int64  `json:"trackId"`
	ID        int64  `json:"id"`
}

func (q *Queries) UpdateStream(ctx context.Context, arg UpdateStreamParams) error {
	_, err := q.db.ExecContext(ctx, updateStream,
		arg.Bitrate,
		arg.Equalizer,
		arg.Path,
		arg.TrackID,
		arg.ID,
	)
	return err
}

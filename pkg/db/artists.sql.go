// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: artists.sql

package db

import (
	"context"
)

const createArtist = `-- name: CreateArtist :one
INSERT INTO artists (name, description)
VALUES (?, ?)
RETURNING id, name, description
`

type CreateArtistParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (q *Queries) CreateArtist(ctx context.Context, arg CreateArtistParams) (Artist, error) {
	row := q.db.QueryRowContext(ctx, createArtist, arg.Name, arg.Description)
	var i Artist
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteArtist = `-- name: DeleteArtist :exec
DELETE FROM artists
WHERE id = ?
`

func (q *Queries) DeleteArtist(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteArtist, id)
	return err
}

const getArtist = `-- name: GetArtist :one
SELECT id, name, description
FROM artists
WHERE id = ?
`

func (q *Queries) GetArtist(ctx context.Context, id int64) (Artist, error) {
	row := q.db.QueryRowContext(ctx, getArtist, id)
	var i Artist
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getArtistAlbums = `-- name: GetArtistAlbums :many
SELECT id, title, year, genre, cover_path, album_id, artist_id
FROM albums
  JOIN album_artists ON albums.id = album_artists.album_id
WHERE album_artists.artist_id = ?
`

type GetArtistAlbumsRow struct {
	ID        int64   `json:"id"`
	Title     string  `json:"title"`
	Year      int64   `json:"year"`
	Genre     string  `json:"genre"`
	CoverPath *string `json:"coverPath"`
	AlbumID   int64   `json:"albumId"`
	ArtistID  int64   `json:"artistId"`
}

func (q *Queries) GetArtistAlbums(ctx context.Context, artistID int64) ([]GetArtistAlbumsRow, error) {
	rows, err := q.db.QueryContext(ctx, getArtistAlbums, artistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetArtistAlbumsRow
	for rows.Next() {
		var i GetArtistAlbumsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Year,
			&i.Genre,
			&i.CoverPath,
			&i.AlbumID,
			&i.ArtistID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArtistByName = `-- name: GetArtistByName :one
SELECT id, name, description
FROM artists
WHERE name = ?
`

func (q *Queries) GetArtistByName(ctx context.Context, name string) (Artist, error) {
	row := q.db.QueryRowContext(ctx, getArtistByName, name)
	var i Artist
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getArtistTracks = `-- name: GetArtistTracks :many
SELECT id, title, position, length, bitrate, album_id, path, audio_path, cover_path, track_id, artist_id
FROM tracks
  JOIN track_artists ON tracks.id = track_artists.track_id
WHERE track_artists.artist_id = ?
`

type GetArtistTracksRow struct {
	ID        int64   `json:"id"`
	Title     string  `json:"title"`
	Position  int64   `json:"position"`
	Length    int64   `json:"length"`
	Bitrate   int64   `json:"bitrate"`
	AlbumID   int64   `json:"albumId"`
	Path      string  `json:"path"`
	AudioPath string  `json:"audioPath"`
	CoverPath *string `json:"coverPath"`
	TrackID   int64   `json:"trackId"`
	ArtistID  int64   `json:"artistId"`
}

func (q *Queries) GetArtistTracks(ctx context.Context, artistID int64) ([]GetArtistTracksRow, error) {
	rows, err := q.db.QueryContext(ctx, getArtistTracks, artistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetArtistTracksRow
	for rows.Next() {
		var i GetArtistTracksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Position,
			&i.Length,
			&i.Bitrate,
			&i.AlbumID,
			&i.Path,
			&i.AudioPath,
			&i.CoverPath,
			&i.TrackID,
			&i.ArtistID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArtists = `-- name: GetArtists :many
SELECT id, name, description
FROM artists
`

func (q *Queries) GetArtists(ctx context.Context) ([]Artist, error) {
	rows, err := q.db.QueryContext(ctx, getArtists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artist
	for rows.Next() {
		var i Artist
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArtist = `-- name: UpdateArtist :exec
UPDATE artists
SET name = ?,
  description = ?
WHERE id = ?
`

type UpdateArtistParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	ID          int64   `json:"id"`
}

func (q *Queries) UpdateArtist(ctx context.Context, arg UpdateArtistParams) error {
	_, err := q.db.ExecContext(ctx, updateArtist, arg.Name, arg.Description, arg.ID)
	return err
}

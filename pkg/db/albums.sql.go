// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: albums.sql

package db

import (
	"context"
	"strings"
)

const addAlbumArtist = `-- name: AddAlbumArtist :exec
INSERT INTO album_artists (album_id, artist_id)
VALUES (?, ?)
`

type AddAlbumArtistParams struct {
	AlbumID  int64 `json:"albumId"`
	ArtistID int64 `json:"artistId"`
}

func (q *Queries) AddAlbumArtist(ctx context.Context, arg AddAlbumArtistParams) error {
	_, err := q.db.ExecContext(ctx, addAlbumArtist, arg.AlbumID, arg.ArtistID)
	return err
}

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO albums (title, year, genre, cover_path)
VALUES (?, ?, ?, ?)
RETURNING id, title, year, genre, cover_path
`

type CreateAlbumParams struct {
	Title     string  `json:"title"`
	Year      int64   `json:"year"`
	Genre     string  `json:"genre"`
	CoverPath *string `json:"coverPath"`
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRowContext(ctx, createAlbum,
		arg.Title,
		arg.Year,
		arg.Genre,
		arg.CoverPath,
	)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Year,
		&i.Genre,
		&i.CoverPath,
	)
	return i, err
}

const deleteAlbum = `-- name: DeleteAlbum :exec
DELETE FROM albums
WHERE id = ?
`

func (q *Queries) DeleteAlbum(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAlbum, id)
	return err
}

const getAlbum = `-- name: GetAlbum :one
SELECT id, title, year, genre, cover_path
FROM albums
WHERE id = ?
`

func (q *Queries) GetAlbum(ctx context.Context, id int64) (Album, error) {
	row := q.db.QueryRowContext(ctx, getAlbum, id)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Year,
		&i.Genre,
		&i.CoverPath,
	)
	return i, err
}

const getAlbumArtists = `-- name: GetAlbumArtists :many
SELECT artists.id,
  artists.name
FROM artists
  JOIN album_artists ON artists.id = album_artists.artist_id
WHERE album_artists.album_id = ?
`

type GetAlbumArtistsRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetAlbumArtists(ctx context.Context, albumID int64) ([]GetAlbumArtistsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumArtists, albumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumArtistsRow
	for rows.Next() {
		var i GetAlbumArtistsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlbumByTitle = `-- name: GetAlbumByTitle :one
SELECT id, title, year, genre, cover_path
FROM albums
WHERE title = ?
`

func (q *Queries) GetAlbumByTitle(ctx context.Context, title string) (Album, error) {
	row := q.db.QueryRowContext(ctx, getAlbumByTitle, title)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Year,
		&i.Genre,
		&i.CoverPath,
	)
	return i, err
}

const getAlbumByTitleAndArtistNames = `-- name: GetAlbumByTitleAndArtistNames :one
SELECT albums.id, albums.title, albums.year, albums.genre, albums.cover_path
FROM albums
  JOIN album_artists ON albums.id = album_artists.album_id
  JOIN artists ON album_artists.artist_id = artists.id
WHERE albums.title = ?
  AND artists.name IN (/*SLICE:artists*/?)
`

type GetAlbumByTitleAndArtistNamesParams struct {
	Title   string   `json:"title"`
	Artists []string `json:"artists"`
}

func (q *Queries) GetAlbumByTitleAndArtistNames(ctx context.Context, arg GetAlbumByTitleAndArtistNamesParams) (Album, error) {
	query := getAlbumByTitleAndArtistNames
	var queryParams []interface{}
	queryParams = append(queryParams, arg.Title)
	if len(arg.Artists) > 0 {
		for _, v := range arg.Artists {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:artists*/?", strings.Repeat(",?", len(arg.Artists))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:artists*/?", "NULL", 1)
	}
	row := q.db.QueryRowContext(ctx, query, queryParams...)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Year,
		&i.Genre,
		&i.CoverPath,
	)
	return i, err
}

const getAlbumTracks = `-- name: GetAlbumTracks :many
SELECT id, title, position, length, bitrate, album_id, path, audio_path, cover_path
FROM tracks
WHERE album_id = ?
ORDER BY position ASC,
  title ASC
`

func (q *Queries) GetAlbumTracks(ctx context.Context, albumID int64) ([]Track, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumTracks, albumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Track
	for rows.Next() {
		var i Track
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Position,
			&i.Length,
			&i.Bitrate,
			&i.AlbumID,
			&i.Path,
			&i.AudioPath,
			&i.CoverPath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlbums = `-- name: GetAlbums :many
SELECT id, title, year, genre, cover_path
FROM albums
ORDER BY title ASC
`

func (q *Queries) GetAlbums(ctx context.Context) ([]Album, error) {
	rows, err := q.db.QueryContext(ctx, getAlbums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Year,
			&i.Genre,
			&i.CoverPath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAlbumArtists = `-- name: RemoveAlbumArtists :exec
DELETE FROM album_artists
WHERE album_id = ?
`

func (q *Queries) RemoveAlbumArtists(ctx context.Context, albumID int64) error {
	_, err := q.db.ExecContext(ctx, removeAlbumArtists, albumID)
	return err
}

const updateAlbum = `-- name: UpdateAlbum :exec
UPDATE albums
SET title = ?,
  year = ?,
  genre = ?,
  cover_path = ?
WHERE id = ?
`

type UpdateAlbumParams struct {
	Title     string  `json:"title"`
	Year      int64   `json:"year"`
	Genre     string  `json:"genre"`
	CoverPath *string `json:"coverPath"`
	ID        int64   `json:"id"`
}

func (q *Queries) UpdateAlbum(ctx context.Context, arg UpdateAlbumParams) error {
	_, err := q.db.ExecContext(ctx, updateAlbum,
		arg.Title,
		arg.Year,
		arg.Genre,
		arg.CoverPath,
		arg.ID,
	)
	return err
}
